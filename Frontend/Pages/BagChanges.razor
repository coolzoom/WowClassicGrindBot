@inject IJSRuntime JSRuntime
@inject IAddonReader addonReader

@implements IDisposable

@if (NewItems.Count() > 0)
{
    <div class="card">
        <div class="card-header">
            Bag Changes
            <div class="float-right">
                <Money Value="TotalMoneyChange" />
            </div>
        </div>
        <div class="card-body">
            @foreach (var bagItem in NewItems)
            {
                <div class="animate__animated animate__backInUp">
                    <BagItemComponent BagItem="bagItem" ShowChangesPrice="true" />
                    <hr style="margin:2px" />
                </div>
            }
        </div>
    </div>
}
@code {

    private const int maxItemToShow = 14;

    private IEnumerable<BagItem> NewItems { get; set; } = null!;

    public int[] TotalMoneyChange { get; set; } = new int[3] { 0, 0, 0 };

    protected override void OnInitialized()
    {
        NewItems = addonReader.BagReader.BagItems.Where(x => x.WasRecentlyUpdated);

        addonReader.BagReader.DataChanged += OnBagReaderDataChanged;
    }

    public void Dispose()
    {
        addonReader.BagReader.DataChanged -= OnBagReaderDataChanged;
    }

    protected int ItemValue(BagItem item)
    {
        if (item.LastChange == 0)
        {
            return item.Item.SellPrice;
        }
        return item.LastChange * item.Item.SellPrice;
    }

    public void OnBagReaderDataChanged()
    {
        NewItems = addonReader.BagReader.BagItems.Where(i => i.WasRecentlyUpdated);

        if (NewItems.Count() > maxItemToShow)
        {
            NewItems = NewItems.Take(maxItemToShow);
            int i = 0;
            foreach (var item in NewItems)
            {
                item.LastUpdated -= TimeSpan.FromSeconds(i / 4);
                i++;
            }
        }

        TotalMoneyChange = Item.ToSellPrice(NewItems.Sum(ItemValue));
        base.InvokeAsync(StateHasChanged);
    }
}