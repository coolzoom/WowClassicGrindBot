@inject IBotController botController
@inject IAddonReader addonReader

@implements IDisposable

<div class="card" style="margin-top: 10px">
    <div class="card-header">
        Goals -> @addonReader.PlayerReader.MinRange() - @addonReader.PlayerReader.MaxRange()
        | Expand <input type="checkbox" @bind="@Expand" />
        <ToggleButton Disable="@(botController.ClassConfig?.Mode == Mode.AttendedGather)" />
        <span class="float-right">
            Net: @addonReader.PlayerReader.NetworkLatency.Value.ToString()ms |
            Npc: @NpcLatency.ToString("0.0")ms |
            Bot: @addonReader.AvgUpdateLatency.ToString("0.0")ms
        </span>
    </div>

    @if (ShowPlan && botController.GoapAgent != null && botController.GoapAgent.Plan.Count > 0)
    {
        <div class="card-body">
            <table class="table table-sm table-striped">
                @foreach (var goal in botController.GoapAgent.Plan)
                {
                    <GoapGoalView goal="goal" IsSelected="false" Expand="false" />
                }
            </table>
        </div>
    }
    @if (ShowGoals && botController.GoapAgent != null)
    {
        <div class="card-body">
            <table class="table table-sm table-striped">
                @foreach (var goal in botController.GoapAgent.AvailableGoals)
                {
                    <GoapGoalView goal="goal" IsSelected="(goal == botController.GoapAgent.CurrentGoal)" Expand="@(Expand || goal is Core.Goals.ParallelGoal)" />
                }
            </table>
        </div>
    }
</div>

@code {

    [Parameter]
    public bool ShowGoals { get; set; } = true;

    [Parameter]
    public bool ShowPlan { get; set; } = true;

    public bool Expand { get; set; } = false;

    public double NpcLatency => botController.AvgScreenLatency + botController.AvgNPCLatency;

    protected override void OnInitialized()
    {
        addonReader.AddonDataChanged += OnAddonDataChanged;
    }

    public void Dispose()
    {
        addonReader.AddonDataChanged -= OnAddonDataChanged;
    }

    private void OnAddonDataChanged()
    {
        base.InvokeAsync(StateHasChanged);
    }
}