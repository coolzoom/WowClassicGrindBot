@implements IDisposable
@inject IBotController botController
@inject WowScreen wowScreen
@inject IAddonReader addonReader
@inject MinimapNodeFinder minimapNodeFinder

<div class="card">
    <div class="card-header">
        <table width="100%">
            <tr>
                <td>
                    Minimap
                    <span style="float: right">
                        <button class="btn btn-sm @(previewEnabled ? "btn-danger" : "btn-primary")" @onclick="TogglePreview">Preview</button>
                        <ToggleButton />
                    </span>
                </td>
            </tr>
        </table>
    </div>
    <div class="card-body" style="padding: 0 0 0 0; width:@(Size)px; height:@(Size)px">
        @if (previewEnabled)
        {
            <img style="width:@(Size)px; height:@(Size)px" src="data:image/png;base64, @WowScreen.ToBase64(wowScreen.MiniMapBitmap, (int)(Size * DownScale))" alt="Red dot" />
        }
    </div>
</div>

@code {
    [Parameter]
    public int Size { get; set; } = 400;

    [Parameter]
    public float DownScale { get; set; } = 0.5f;

    [Parameter]
    public EventCallback<int> OnNodeFound { get; set; }

    private bool lastNodeFound = false;
    private int lastNodeCount = 0;

    private bool previewEnabled = true;

    protected override void OnInitialized()
    {
        if (OnNodeFound.HasDelegate)
        {
            minimapNodeFinder.NodeEvent += NodeFound;
        }
    }

    public void Dispose()
    {
        if (OnNodeFound.HasDelegate)
        {
            minimapNodeFinder.NodeEvent -= NodeFound;
        }
    }

    private void NodeFound(object? source, MinimapNodeEventArgs e)
    {
        if (!botController.IsBotActive) return;

        bool nodeFound = e.X > 0 && e.Y > 0;
        if (lastNodeFound != nodeFound || e.Amount != lastNodeCount)
        {
            base.InvokeAsync(() =>
            {
                OnNodeFound.InvokeAsync(e.Amount);
            });
            lastNodeCount = e.Amount;
        }
        lastNodeFound = nodeFound;

        if (previewEnabled)
        {
            base.InvokeAsync(StateHasChanged);
        }
    }

    private void TogglePreview()
    {
        previewEnabled = !previewEnabled;
    }
}